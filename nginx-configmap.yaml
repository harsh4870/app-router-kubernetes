apiVersion: v1
kind: ConfigMap
metadata:
  name: nginxconf
  namespace: default
data:
  nginx.conf: |
    error_log                        /var/log/nginx/error.log warn;
    error_log                        /dev/stderr warn;
    working_directory                /var/log/nginx/; # core-file location
    worker_processes                 1;
    pid                              /tmp/nginx.pid;

    events {
      use                            epoll;
      worker_connections             1024;
      multi_accept                   on;
    }

    http {
      underscores_in_headers         on;
      
      proxy_http_version             1.1;
      proxy_busy_buffers_size        256k;
      proxy_buffers                  4 256k;
      proxy_buffer_size              128k;
      proxy_read_timeout             300s;
      client_max_body_size           0;
      server_names_hash_bucket_size  256;
      variables_hash_bucket_size     256;
      sendfile                       on;
      keepalive_timeout              300;
      keepalive_requests             2000000;

      
      include                        mime.types;
      default_type                   application/octet-stream;

      # logging format (includes built-in nginx timing intervals)
      log_format timing_format '$remote_addr - $remote_user [$time_local] '
               '"$request" $status $body_bytes_sent '
               '"$http_referer" "$http_user_agent" '
               '"request_time=$request_time" '
               '"upstream_response_time=$upstream_response_time" '
               '"upstream_connect_time=$upstream_connect_time" '
               '"upstream_header_time=$upstream_header_time"';

      # Recommended: Access Log
      access_log                     /var/log/nginx/access.log timing_format;
      access_log                     /dev/stdout timing_format;

      server {
        listen                       8000;     
        listen                       8888 ssl; 
        server_name                  app-router.default.svc.cluster.local;
        ssl_certificate              /etc/nginx/ssl/tls.crt;
        ssl_certificate_key          /etc/nginx/ssl/tls.key;

        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 10m;
        ssl_verify_client off;

        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP  $remote_addr;

        client_body_temp_path          /tmp/client_temp;
        proxy_temp_path                /tmp/proxy_temp;
        fastcgi_temp_path              /tmp/fastcgi_temp;
        uwsgi_temp_path                /tmp/uwsgi_temp;
        scgi_temp_path                 /tmp/scgi_temp;

        location ^~ /health {
          return 200 '{"status":"Running"}';
          add_header Content-Type text/plain;
        }
        
        #service-1
        location ^~ /user/data/bulk-api/v1/ {
        set $user user.{{NAMESPACE}}.svc.cluster.local; #K8s service name
        proxy_pass http://$user:8080;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;
      }

      #service-2
      location ^~ /account/data/bulk-api/v1/ {
        set $account account.{{NAMESPACE}}.svc.cluster.local; #K8s service name
        proxy_pass http://$account:8080;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;
      }
      
      #service-3
      location ^~ /settings/data/bulk-api/v1/ {
        set $settings settings.{{NAMESPACE}}.svc.cluster.local; #K8s service name
        proxy_pass http://$settings:8080;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;
      }
      
      }
    }
